;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <io.h>
;#include <glcd.h>
;#include <font5x7.h>
;#include <delay.h>
;#include <stdio.h>
;#include <string.h>
;#include <display.h>
;flash int keycode[4][4]={{0,1,2,3},{4,5,6,7},{8,9,10,11},{12,13,14,15}};
;char input=16,IT=0,cnt0=0,set=0,dis,x=0,y=0,cnt2,cnt4,cnt5,cnt6,cnt8,cnt9,cnt10,cnt12,cnt13,cnt14,crt,backcnt,str[256],i ...
;volatile char alpha=1;

	.DSEG
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E 
; 0000 000F char temp=0,col=10,row=10;
; 0000 0010 
; 0000 0011 temp=(PINC &0X0F);
;PCODE: $0000000F VOL: 0
;	temp -> R17
;	col -> R16
;	row -> R19
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0012 if(temp ==14)
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0013 row=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0014 if(temp ==13)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0015 row=1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0016 if(temp ==11)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0017 row=2;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0018 if(temp ==7)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0019 row=3;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001A 
; 0000 001B 
; 0000 001C delay_ms(20);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001D 
; 0000 001E PORTC=0XEF;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 001F delay_us(50);
;PCODE: $00000036 VOL: 0
; 0000 0020 if((PINC&0X0F)!=0X0F)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0021 col=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0022 
; 0000 0023 else
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0024 {
; 0000 0025 PORTC=0XDF;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0026 delay_us(50);
;PCODE: $00000041 VOL: 0
; 0000 0027 if((PINC &0X0F)!=0X0F)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0028 col=1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0029 else
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002A {
; 0000 002B PORTC=0xBF;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 002C delay_us(50);
;PCODE: $0000004C VOL: 0
; 0000 002D if((PINC&0X0F)!=0X0F)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002E col=2;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002F else
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0030 {
; 0000 0031 PORTC=0x7F;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0032 delay_us(50);
;PCODE: $00000057 VOL: 0
; 0000 0033 if((PINC&0X0F)!=0X0F)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0034 col=3;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0035 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0036 }
;PCODE: $00000060 VOL: 0
; 0000 0037 }
;PCODE: $00000061 VOL: 0
; 0000 0038 
; 0000 0039 input=keycode[row][col];
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 003A 
; 0000 003B PORTC=0X0F;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003C IT=1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003D 
; 0000 003E while(PIND.2==0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 003F 
; 0000 0040 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;void main(void)
; 0000 0042 {
;PCODE: $0000007B VOL: 0
; 0000 0043 
; 0000 0044 GLCDINIT_t glcd_init_data;
; 0000 0045 DDRC=0XF0;
;PCODE: $0000007C VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0046 PORTC=0X0F;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0047 DDRD.0=0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0048 DDRD.1=1;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0049 DDRD.2=0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004A // USART initialization
; 0000 004B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 004C // USART Receiver: On
; 0000 004D // USART Transmitter: On
; 0000 004E // USART Mode: Asynchronous
; 0000 004F // USART Baud Rate: 9600
; 0000 0050 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0051 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0052 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0053 UBRRH=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0054 UBRRL=0x33;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0055 
; 0000 0056 
; 0000 0057 // Graphic Display Controller initialization
; 0000 0058 // The KS0108 connections are specified in the
; 0000 0059 // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 005A // DB0 - PORTA Bit 0
; 0000 005B // DB1 - PORTA Bit 1
; 0000 005C // DB2 - PORTA Bit 2
; 0000 005D // DB3 - PORTA Bit 3
; 0000 005E // DB4 - PORTA Bit 4
; 0000 005F // DB5 - PORTA Bit 5
; 0000 0060 // DB6 - PORTA Bit 6
; 0000 0061 // DB7 - PORTA Bit 7
; 0000 0062 // E - PORTB Bit 0
; 0000 0063 // RD /WR - PORTB Bit 1
; 0000 0064 // RS - PORTB Bit 2
; 0000 0065 // /RST - PORTB Bit 3
; 0000 0066 // CS1 - PORTB Bit 4
; 0000 0067 // CS2 - PORTB Bit 5
; 0000 0068 
; 0000 0069 // Specify the current font for displaying text
; 0000 006A glcd_init_data.font=font5x7;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 006B // No function is used for reading
; 0000 006C // image data from external memory
; 0000 006D glcd_init_data.readxmem=NULL;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006E // No function is used for writing
; 0000 006F // image data to external memory
; 0000 0070 glcd_init_data.writexmem=NULL;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0071 
; 0000 0072 glcd_init(&glcd_init_data);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0073  // External Interrupt(s) initialization
; 0000 0074 // INT0: On
; 0000 0075 // INT0 Mode: Low level
; 0000 0076 // INT1: Off
; 0000 0077 // INT2: Off
; 0000 0078 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0079 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 007A MCUCSR=(0<<ISC2);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 007B GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 007C 
; 0000 007D // Global enable interrupts
; 0000 007E #asm("sei")
;PCODE: $000000A2 VOL: 0
	sei
;PCODE: $000000A3 VOL: 0
; 0000 007F while (1)
;PCODE: $000000A4 VOL: 0
; 0000 0080       {
; 0000 0081 if(IT==1)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0082    {
; 0000 0083 
; 0000 0084     if(alpha==1)
;PCODE: $000000A8 VOL: 1
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0085     dis_alpha();
;PCODE: $000000AB VOL: 0
; 0000 0086 
; 0000 0087 
; 0000 0088     if(alpha==0)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 1
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0089     dis_num();
;PCODE: $000000B0 VOL: 0
; 0000 008A 
; 0000 008B    }
;PCODE: $000000B1 VOL: 0
; 0000 008C   }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 008D }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
